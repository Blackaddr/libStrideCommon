#pragma once

#include <vector>
#include <JuceHeader.h>
#include "Util/CommonDefs.h"
#include "Util/FileUtil.h"
#include "Util/StringUtil.h"
#include "Util/ErrorMessage.h"
#include "Util/ErrorMessageWindow.h"

namespace stride
{
    constexpr unsigned THE_FIFTH_ELEMENT = 5;
    constexpr size_t   UID_SIZE_BYTES    = 16;
    constexpr unsigned ENCODE_KEY[stride::UID_SIZE_BYTES] = {3, 5, 1, 4, 10, 7, 2, 6, 11, 13, 12, 15, 8, 14, 0, 9};


    constexpr size_t SIG_SIZE_BYTES      = 64;
    constexpr size_t EFX_KEY_SIZE_BYTES  = 256;
    // The datagram consists of random data sub-block + UID
    constexpr size_t DATAGRAM_SIZE_BYTES = EFX_KEY_SIZE_BYTES - SIG_SIZE_BYTES + UID_SIZE_BYTES;  // Device Key datagram size
    constexpr size_t DEVEL_DATAGRAM_SIZE_BYTES = EFX_KEY_SIZE_BYTES - SIG_SIZE_BYTES;

    constexpr size_t PUBLIC_KEY_SIZE_BYTES  = 32;
    constexpr size_t PRIVATE_KEY_SIZE_BYTES = 32;


    constexpr char EFX_KEY_SUFFIX[]         = ".efxkey";
    constexpr char EFX_TYPE_STR[]           = "efx";
    constexpr char DEVICE_KEY_SUFFIX[]      = ".devkey";
    constexpr char DEVICE_TYPE_STR[]        = "device";
    constexpr char DEVEL_KEY_SUFFIX[]       = ".dvlkey";
    constexpr char DEVEL_TYPE_STR[]         = "devel";

    #define TEENSY_AUDIO_BLOCK {0xBA, 0xAA, 0x20, 0x20, 0x51, 0xFF, 0x4A, 0xEC, 0x29, 0xCD, 0xBA, 0xAB, 0xF2, 0xFB, 0xE3, 0x46, 0x7C, 0xC2, 0x54, 0xF8, 0x1B, 0xE8, 0xE7, 0x8D, 0x76, 0x5A, 0x2E, 0x63, 0x33, 0x9F, 0xC9, 0x9A, 0x66, 0x32, 0x0D, 0xB7, 0x31, 0x58, 0xA3, 0x5A, 0x25, 0x5D, 0x05, 0x17, 0x58, 0xE9, 0x5E, 0xD4, 0xAB, 0xB2, 0xCD, 0xC6, 0x9B, 0xB4, 0x54, 0x11, 0x0E, 0x82, 0x74, 0x41, 0x21, 0x3D, 0xDC, 0x87, 0x70, 0xE9, 0x3E, 0xA1, 0x41, 0xE1, 0xFC, 0x67, 0x3E, 0x01, 0x7E, 0x97, 0xEA, 0xDC, 0x6B, 0x96, 0x8F, 0x38, 0x5C, 0x2A, 0xEC, 0xB0, 0x3B, 0xFB, 0x32, 0xAF, 0x3C, 0x54, 0xEC, 0x18, 0xDB, 0x5C, 0x02, 0x1A, 0xFE, 0x43, 0xFB, 0xFA, 0xAA, 0x3A, 0xFB, 0x29, 0xD1, 0xE6, 0x05, 0x3C, 0x7C, 0x94, 0x75, 0xD8, 0xBE, 0x61, 0x89, 0xF9, 0x5C, 0xBB, 0xA8, 0x99, 0x0F, 0x95, 0xB1, 0xEB, 0xF1, 0xB3, 0x05, 0xEF, 0xF7, 0x00, 0xE9, 0xA1, 0x3A, 0xE5, 0xCA, 0x0B, 0xCB, 0xD0, 0x48, 0x47, 0x64, 0xBD, 0x1F, 0x23, 0x1E, 0xA8, 0x1C, 0x7B, 0x64, 0xC5, 0x14, 0x73, 0x5A, 0xC5, 0x5E, 0x4B, 0x79, 0x63, 0x3B, 0x70, 0x64, 0x24, 0x11, 0x9E, 0x09, 0xDC, 0xAA, 0xD4, 0xAC, 0xF2, 0x1B, 0x10, 0xAF, 0x3B, 0x33, 0xCD, 0xE3, 0x50, 0x48, 0x47, 0x15, 0x5C, 0xBB, 0x6F, 0x22, 0x19, 0xBA, 0x9B, 0x7D, 0xF5, 0x0B, 0xE1, 0x1A, 0x1C, 0x7F, 0x23, 0xF8, 0x29, 0xF8, 0xA4, 0x1B, 0x13, 0xB5, 0xCA, 0x4E, 0xE8, 0x98, 0x32, 0x38, 0xE0, 0x79, 0x4D, 0x3D, 0x34, 0xBC, 0x5F, 0x4E, 0x77, 0xFA, 0xCB, 0x6C, 0x05, 0xAC, 0x86, 0x21, 0x2B, 0xAA, 0x1A, 0x55, 0xA2, 0xBE, 0x70, 0xB5, 0x73, 0x3B, 0x04, 0x5C, 0xD3, 0x36, 0x94, 0xB3, 0xAF, 0xE2, 0xF0, 0xE4, 0x9E, 0x4F, 0x32, 0x15, 0x49, 0xFD, 0x82, 0x4E, 0xA9}

    struct TeensyUid {
        uint8_t uid[UID_SIZE_BYTES];
        std::string getHexKey();
        std::string getAlphaKey();
        std::string getAlphaKeyPretty();
        unsigned getProductId();
        unsigned getRev();
        bool     isValid();
        static TeensyUid getUidFromAlphaKey(const std::string& key); // works for both normal and pretty formatted strings

        bool operator==(const TeensyUid& cmp)
        {
            bool isEqual = true;
            for (unsigned i=0; i < UID_SIZE_BYTES; i++) {
                if (cmp.uid[i] != uid[i]) { isEqual = false; }
            }
            return isEqual;
        }
    };

    TeensyUid encodeUid(const TeensyUid& teensyUid);
    TeensyUid encodeUid(const TeensyUid* teensyUidPtr);
    TeensyUid decodeUid(const TeensyUid* teensyUidPtr);


    class DeviceKey
    {
    public:
        TeensyUid uid;
        uint8_t key[PUBLIC_KEY_SIZE_BYTES];
        bool isValid = false;

        int writeFile(const std::string& filepath);

        static DeviceKey readFile(const std::string& filepath);
    };

    class DevelKey
    {
    public:
        TeensyUid uid;
        uint8_t pbk[PUBLIC_KEY_SIZE_BYTES];
        uint8_t pvk[PRIVATE_KEY_SIZE_BYTES];
        bool isValid = false;

        int writeFile(const std::string& filepath);

        static DevelKey readFile(const std::string& filepath);
    };

    class ProductKey
    {
    public:
        TeensyUid uid;
        std::string efxCompany;
        std::string efxName;
        uint8_t key[EFX_KEY_SIZE_BYTES];

        bool isValid = false;

        int writeFile(const std::string& filepath, bool overwrite=false);

        static ProductKey readFile(const std::string& filepath);
        static std::vector<ProductKey> readFileArray(const std::string& filepath);
        static int writeFileArray(const std::vector<ProductKey>& productKeyVec, const std::string& filepath, bool overwrite=false);
    };

}